{"pages":[{"title":"About Karl","text":"NicknameKarl NameSoonyeong Kweon Education Academic Achievement Period Diploma of Computer Programming Analyist (CPA2)Fanshawe College, London, ON 2018 ~ 2021 B.A. of Linguistics and Literature in EnglishKyung Hee University, Korea 2003 ~ 2010 Experience Job Title Period Freelancer Translator 2017 ~ 2019 Sungdong Shipbuilding &amp; Marine Engineering&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2010 ~ 2016 Skills Skills/Languages Descriptions Tools C/C++, Java, C# Fundamentals, AlgorithmsObject Oriented ProgrammingDesign Patterns VS 2017/2019, Eclipse ASP .Net CoreASP .NET Framework Component Based ProgrammingWCF Service VS 2019 HTML5/CSS3, NodeJsJavaScript/TypeScript Basic web development VS Code Angular, React, Vue, jQuery Front-End Frameworks forfull-stack web development VS Code ASP .Net Framework/CoreJavaEE=Spring, Express Back-End Frameworks forfull-stack web-development VS 2019, VS Code NoSQL Non-Relational Database MongoDb Atlast, Firebase MsSQL Relational Database SSMS MySQL, SQLite Relational Database For JDBC and Android Java, Kotlin Mobile Development Android Studio Python, spaCy Natural Language Processing VS Code Php Secure Computing Introduction XAMPP InterestsElectric Guitar, Games, Programming,Family, Making Cold Brew Coffee and more","link":"/about/index.html"}],"posts":[{"title":"01 Singleton","text":"Singleton does…“Ensure a class having one instance only”“Provide a global access point of it” When to use Singleton?“There should be only one instance. And,”“The instance should be accessible at the well known location”Considerable usages of Singleton?“Shared resource accessing.” … Network printer queue.“Database accessing.”“Logging.” Pros“Good to control accesses to a single instance.”“Easy to switch the class which allows for a variable number of instances.”“More flexible than using static class methods, taking variable numbers of instances into account.”Cons“Not has better efficiency than using global variable.”&nbsp;┕ “Considering the needs of accessing from anywhere, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using Singleton is in turn same as using global variable.” Code Samples“This is creaional pattern.”“Createional pattern defers object creation activity to another object.”“In Singleton, that is itself to have the duty&nbsp; to create object through getInstance() method.”C++1234567891011121314151617181920212223242526272829303132333435363738// Singleton Class// Due to space issue, header implementation is usedclass dbObject {private: static dbObject* _dbInstance; // actual instance to be accessed dbObject(); // ctor blocked to control instantiation int userCount = 0; // example for singleton instance usagepublic: // User should use this member func to get an instance static dbObject* getDbInstance() { // if instance is null, call constructor, Or use existing instance _dbInstance == 0 ? _dbInstance = new dbObject() : _dbInstance; // just print out instance creation cout&lt;&lt; ++userCount &lt;&lt; &quot; user(s) accessed to the dbinstance!\\n&quot;; return _Instance; } };// Client class access to Singletonclass User {private: dbObject* _dbInstance;public: User() : // User creation calls Singleton method _dbInstance(dbObject::getDbInstance()) {} //...};// implementationint main() { User user1 = new User(); // 1 user(s) accessed to the dbinstance! User user2 = new User(); // 2 user(s) accessed to the dbinstance! User user3 = new User(); // 3 user(s) accessed to the dbinstance! // ... } C#123456789101112131415161718192021222324252627282930313233343536// Singleton Classpublic class Printer { private static Printer* _prtQueue; // actual instance to be accessed private Printer(); // ctor blocked to control instantiation private int queue = 0; // example for singleton instance usage // User should use this member func to get an instance public static Printer* getInstance() { // if instance is null, call constructor, Or use existing instance _prtQueue == 0 ? _prtQueue = new Printer() : _prtQueue; // just print out instance creation Console.WriteLine($&quot;{queue} user(s) is in the printer queue!\\n&quot;); return _prtQueue; } };// Client class access to Singletonclass User { private Printer* _prtInstance; public User() { // User creation calls Singleton method _prtInstance = Printer.getInstance(); } //...};// implementationclass Program { static void main(string[] args) { User user1 = new User(); // 1 user(s) is in the printer queue! User user2 = new User(); // 2 user(s) is in the printer queue! User user3 = new User(); // 3 user(s) is in the printer queue! // ... }} Related Patterns“Abstract Factory”“Builder”“Prototype”Can be implemented in Singleton Pattern. Questions?Is this Singleton is naturally ‘Thread-Safe’? &lt; Inspired by GOF &gt;","link":"/10/26/2021/01-Singleton/"},{"title":"Default Method for Interface","text":"Interface has a method with body? C++ C# Java Defualt method O No modifier O No modifier O ‘Default’ * Not all languages technically have so called ‘Default method’.&nbsp;&nbsp;&nbsp;But in the context of superficial functuinality, they all provide similar techniques.*C++&nbsp;&nbsp;: Abstract class can have overridable virutal function with imeplemtation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Overriding is optional.*C#&nbsp;&nbsp;&nbsp;&nbsp;: Interface/astract class can have overridable concrete method with imeplemtation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Overriding is optional.*Java: Initial java interface should be completely abstract. Default method overriding is optional.","link":"/10/25/2021/DefaultMethod-md/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/10/22/2021/hello-world/"},{"title":"Multiple Inheritance","text":"Multiple Inheritance with C++, C#, or Java Overview Overview concepts C++ C# Java Class A blueprint for creating object. Includes state and behavior. Can be considered as a user-defined.Type. Abstract Class* A class includes at least one pure virtual function. A class with methods that has 'abstract' modifier which defers implementation to its children. Interface* Abstract class does a similar job. With 'interface' modifier, defines a set of behaviours. *Consider very basic concept only.*abstract class and interface cannot be instantiated. Multiple Inheritance&nbsp;&nbsp;a class can derived from one or more parents Multiple Inheritance C++&nbsp;&nbsp;&nbsp; C#&nbsp;&nbsp;&nbsp; Java&nbsp;&nbsp;&nbsp; Class / Virtual Class O&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; Abstract Class O&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; Interface* O&nbsp;&nbsp;&nbsp; O&nbsp;&nbsp;&nbsp; O&nbsp;&nbsp;&nbsp; *In C++, pure abstract class does similar jobs for the interface.","link":"/10/22/2021/MultipleInheritance/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","link":"/tags/Design-Pattern/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Language Comparison","slug":"Language-Comparison","link":"/tags/Language-Comparison/"}],"categories":[{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"C++_C#_Java Comparison","slug":"Programming/C-C-Java-Comparison","link":"/categories/Programming/C-C-Java-Comparison/"},{"name":"Design Patterns in C++&#x2F;C#","slug":"Programming/Design-Patterns-in-C-C","link":"/categories/Programming/Design-Patterns-in-C-C/"},{"name":"Creational","slug":"Programming/Design-Patterns-in-C-C/Creational","link":"/categories/Programming/Design-Patterns-in-C-C/Creational/"}]}