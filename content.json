{"pages":[{"title":"About Karl","text":"NicknameKarl NameSoonyeong Kweon Education Academic Achievement Period Diploma of Computer Programming Analyist (CPA2)Fanshawe College, London, ON 2018 ~ 2021 B.A. of Linguistics and Literature in EnglishKyung Hee University, Korea 2003 ~ 2010 Experience Job Title Period Freelancer Translator 2017 ~ 2019 Sungdong Shipbuilding &amp; Marine Engineering&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2010 ~ 2016 Skills Skills/Languages Descriptions Tools C/C++, Java, C# Fundamentals, AlgorithmsObject Oriented ProgrammingDesign Patterns VS 2017/2019, Eclipse ASP .Net CoreASP .NET Framework Component Based ProgrammingWCF Service VS 2019 HTML5/CSS3, NodeJsJavaScript/TypeScript Basic web development VS Code Angular, React, Vue, jQuery Front-End Frameworks forfull-stack web development VS Code ASP .Net Framework/CoreJavaEE=Spring, Express Back-End Frameworks forfull-stack web-development VS 2019, VS Code NoSQL Non-Relational Database MongoDb Atlast, Firebase MsSQL Relational Database SSMS MySQL, SQLite Relational Database For JDBC and Android Java, Kotlin Mobile Development Android Studio Python, spaCy Natural Language Processing VS Code Php Secure Computing Introduction XAMPP InterestsElectric Guitar, Games, Programming,Family, Making Cold Brew Coffee and more","link":"/about/index.html"}],"posts":[{"title":"01 Singleton","text":"Singleton does…“Ensure a class having one instance only”“Provide a global access point of it” When to use Singleton?“There should be only one instance. And,”“The instance should be accessible at the well known location”Considerable usages of Singleton?“Shared resource accessing.” … Network printer queue.“Database accessing.”“Logging.” Pros“Good to control accesses to a single instance.”“Easy to switch the class which allows for a variable number of instances.”“More flexible than using static class methods, taking variable numbers of instances into account.”Cons“Not has better efficiency than using global variable.”&nbsp;┕ “Considering the needs of accessing from anywhere, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using Singleton is in turn same as using global variable.” Code Samples“This is creaional pattern.”“Createional pattern defers object creation activity to another object.”“In Singleton, that is itself to have the duty&nbsp; to create object through getInstance() method.”C++1234567891011121314151617181920212223242526272829303132333435363738// Singleton Class// Due to space issue, header implementation is usedclass dbObject {private: static dbObject* _dbInstance; // actual instance to be accessed dbObject(); // ctor blocked to control instantiation int userCount = 0; // example for singleton instance usagepublic: // User should use this member func to get an instance static dbObject* getDbInstance() { // if instance is null, call constructor, Or use existing instance _dbInstance == 0 ? _dbInstance = new dbObject() : _dbInstance; // just print out instance creation cout&lt;&lt; ++userCount &lt;&lt; &quot; user(s) accessed to the dbinstance!\\n&quot;; return _Instance; } };// Client class access to Singletonclass User {private: dbObject* _dbInstance;public: User() : // User creation calls Singleton method _dbInstance(dbObject::getDbInstance()) {} //...};// implementationint main() { User user1 = new User(); // 1 user(s) accessed to the dbinstance! User user2 = new User(); // 2 user(s) accessed to the dbinstance! User user3 = new User(); // 3 user(s) accessed to the dbinstance! // ... } C#123456789101112131415161718192021222324252627282930313233343536// Singleton Classpublic class Printer { private static Printer* _prtQueue; // actual instance to be accessed private Printer(); // ctor blocked to control instantiation private int queue = 0; // example for singleton instance usage // User should use this member func to get an instance public static Printer* getInstance() { // if instance is null, call constructor, Or use existing instance _prtQueue == 0 ? _prtQueue = new Printer() : _prtQueue; // just print out instance creation Console.WriteLine($&quot;{queue} user(s) is in the printer queue!\\n&quot;); return _prtQueue; } };// Client class access to Singletonclass User { private Printer* _prtInstance; public User() { // User creation calls Singleton method _prtInstance = Printer.getInstance(); } //...};// implementationclass Program { static void main(string[] args) { User user1 = new User(); // 1 user(s) is in the printer queue! User user2 = new User(); // 2 user(s) is in the printer queue! User user3 = new User(); // 3 user(s) is in the printer queue! // ... }} Related Patterns“Abstract Factory”“Builder”“Prototype”Can be implemented in Singleton Pattern. Questions?Is this Singleton is naturally ‘Thread-Safe’? &lt; Inspired by GOF &gt;","link":"/10/26/2021/01-Singleton/"},{"title":"Chat Mobile PWA App","text":"Link of the Web Hosted on HeroKu Purpose of the Project Major Dependencies Plugins/DevTools Under Construnction","link":"/11/03/2021/ChatApp/"},{"title":"Default Method for Interface","text":"Interface has a method with body? C++ C# Java Defualt method O No modifier O No modifier O ‘Default’ * Not all languages technically have so called ‘Default method’.&nbsp;&nbsp;&nbsp;But in the context of superficial functuinality, they all provide similar techniques.*C++&nbsp;&nbsp;: Abstract class can have overridable virutal function with imeplemtation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Overriding is optional.*C#&nbsp;&nbsp;&nbsp;&nbsp;: Interface/astract class can have overridable concrete method with imeplemtation.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Overriding is optional.*Java: Initial java interface should be completely abstract. Default method overriding is optional.","link":"/10/25/2021/DefaultMethod-md/"},{"title":"Canadian City Statistics Web App","text":"Link of the Web Video on Google Drive Purpose of the Project Major Dependencies Plugins/DevTools Under Construnction","link":"/11/03/2021/CanadianCityStats/"},{"title":"Pig Game Multiplayer","text":"Link of the Web Video on Google Drive Purpose of the Project Major Dependencies Plugins/DevTools Under Construnction","link":"/11/03/2021/PigGame/"},{"title":"Multiple Inheritance","text":"Multiple Inheritance with C++, C#, or Java Overview Overview concepts C++ C# Java Class A blueprint for creating object. Includes state and behavior. Can be considered as a user-defined.Type. Abstract Class* A class includes at least one pure virtual function. A class with methods that has 'abstract' modifier which defers implementation to its children. Interface* Abstract class does a similar job. With 'interface' modifier, defines a set of behaviours. *Consider very basic concept only.*abstract class and interface cannot be instantiated. Multiple Inheritance&nbsp;&nbsp;a class can derived from one or more parents Multiple Inheritance C++&nbsp;&nbsp;&nbsp; C#&nbsp;&nbsp;&nbsp; Java&nbsp;&nbsp;&nbsp; Class / Virtual Class O&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; Abstract Class O&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; Interface* O&nbsp;&nbsp;&nbsp; O&nbsp;&nbsp;&nbsp; O&nbsp;&nbsp;&nbsp; *In C++, pure abstract class does similar jobs for the interface.","link":"/10/22/2021/MultipleInheritance/"},{"title":"Retail PO Mobile App","text":"Link of the Web Hosted on HeroKu (developed in JDK16, deployed in JDK1.8 for HeroKu support) Hosted on AWS with Docker Purpose of the Project Major Dependencies Plugins/DevTools Under Construnction","link":"/11/03/2021/RetailPO/"},{"title":"Travel Advisor Mobile Web App","text":"Link of the Web Hosted on HeroKu Purpose of the Project Major Dependencies Plugins/DevTools Under Construnction","link":"/11/03/2021/TravelAdvisor/"},{"title":"Vue.js Introduction","text":"Vue Directives &amp; Component optionsVue Official WebComponent options Data data&nbsp;Type Object, accepts function, and returns an object with properties. props&nbsp;Type Array, accepts data from the parent component. Contains a set of attributes. methods (event handling)&nbsp;Type Object of Function. computed (computed properties)&nbsp;Type Object of Function (collections). watch&nbsp;Key name is the attribute/expression to watch and its value is the callback. Be careful with arrow functions for methods, computed and watch. DOM el&nbsp;Type CSS string or Html Element. Can mount on a DOM element when new is used for instance creation. ‘#’ prefix is used in value to get the id of an Element. template&nbsp;Type string. This is used as the markup(html) for the Component/instance. Template replace the mounted element. Directives v-if | v-else | v-else-if &nbsp;Display element(s) by conditions initially contained in v-if, then additionally add paths with v-else or v-else-if v-for &nbsp;Has ability to display multiple elements with source data. Can use Array, Object, string etc. Need to specify an item in Array/Object with a index/key in a group to render. If reorder is required, put a key value in ‘:key’ value after v-for. v-on: &nbsp;Has shorthand ‘@’. Work with Function or Object, to handle event(s). Has modifiers to use (@event .MODIFIER). v-bind &nbsp;Has shorthand ‘:’. Work with Any (argument: attr or prop) or Object (no arg.), to handle dynamic binding of attr-expr or prop-expr. Class binding is to bind style, Prop binding is to bind with child prop which should be declread properly in the child component. Has modifiers to use (@event .MODIFIER). v-model &nbsp;For input|select|textare elements or components. Generates two-way binding on them. Has modifiers to use (@event .MODIFIER).","link":"/11/03/2021/Vue-Intro/"},{"title":"Vue2 Web Games","text":"Link of the Web Hosted on Firebase Purpose of the Project To learn how to setup Vue.js, Vuex, and webpack. To apply Vue.js Component options and Directives To implement algorithms of the games with Vue.js components. To laern how to manage Vuex store. To learn VueRouter to implement sub-pages in the SPA app. To learn dynamic route matching To learn parent-child components structure and its communication Vue Component options &amp; Directives Vue Intro Major Dependencies Vue 2.6+ Vuex 3.4+ VueRouter 3.2+ Vuetify 2.3+ core-js 3.6+ eslint-loader 4.0+ Plugins/DevTools Webpack 4.44+ @vue/cli-plugins (babel, eslint, router, vuex) 4.5 @vue/cli-service 4.5 vue-template-compiler 2.6.11 babel-eslint 10.1+ eslint 7.8+ Games 1 Number Cracker2 Response Test3 Tic-Tac_Toe4 Mine Sweeper","link":"/11/03/2021/Vue-web-games/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/10/22/2021/hello-world/"},{"title":"Game1 - Number Cracker","text":"Game1 - Number Cracker Layout &lt;form&gt; &lt;input&gt; &lt;button&gt; &lt;ul&gt; &lt;li&gt; {{ interpolations data from vue script }} 123456789101112131415161718&lt;template&gt; &lt;div&gt; &lt;h1&gt;{{result}}&lt;/h1&gt; &lt;h2&gt;Try to guess 4-digit unique number.&lt;/h2&gt; &lt;form v-on:submit.prevent=&quot;onSubmitForm&quot;&gt; &lt;input ref=&quot;input&quot; minlength=&quot;4&quot; maxlength=&quot;4&quot; v-model=&quot;value&quot;/&gt; &lt;button type=&quot;submit&quot;&gt;Try!&lt;/button&gt; &lt;/form&gt; &lt;div&gt;Trial: {{trials.length}}&lt;/div&gt; &lt;ul&gt; &lt;li v-for=&quot;trial in trials&quot; :key=&quot;trial&quot;&gt; &lt;div&gt;{{trial.try}}&lt;/div&gt; &lt;div&gt;{{trial.result}}&lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt; Vue things v-on:submit.prevent in form element to block refreshign the page. Then button ‘submit’ will do another thing. v-for will show list-items augmented as the user clicks the submit button. v-model will get a value from input box and send it to ‘value’ in data. How to play At start, 4-digit unique random number is selected. The number is ranged between 1 - 9. The user can guess 10 times. If a number is in the list but in another position, it’s counted as ball. If a number is in a right place, it’s counted as strike. If the user get the correct number within 10 tries, the user wins. Game algorithm There is a helper function to initially pick 4 random unique numbers. There is an candidates array of 9 numbers (1 - 9). To implement random unique number, used Math.floor() and Math.random(). To make a chosen number unique, used candidates.splice(RANDOM_CHOSEN_NUMBER) Pick a number 4 times in a loop, in each loop push the random number to a new array. Main game algorithm is as follows. Has 4 data(or states) elements answer: get array of random number trials: an array of user trials value: get user’s trial numbers from input box reuslt: a string to display a title or game progress There is one method for the game lifecyle. First, compare input with the answer. array.join(‘’) is used to make the array into 4 digit number to match with input numbers. If the inpu is wrong, analyze the input numbers (compare with answer). Displays the result in the list. Repeat till get the answer or waste all 10 chances. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;script&gt; const numGenerator = () =&gt; { const candidates = [1, ... , 9] const chosen = [] for (let i = 0; i &lt; 4; i++) { const pick = candidates.splice( // random() returns [0 ... 1) // maximum 0.9x -&gt; 0.9x * 9 (1st time) =&gt; 8.x // so floor is used to get correct number range. // floor(8.x, 1) is 9, so one from min 0, max 9 can be picked. Math.floor( Math.random() * (candidates.length) ), 1)[0] // splice returns an array of deleted number(s) chosen.push(pick) } } export default { data () { return { answer: getNumbers(), trials: [], state: '', value: '', result: 'Number Cracker' } }, methods: { onSubmitForm () { if (this.value === this.answer.join('')) { // if input matches the answer this.trials.push({ try: this.value, result: 'Home Run!' }) this.result = 'Home Run!' alert('Restarting the game.') this.answer = getNumbers() this.value = '' this.trials = [] this.$refs.input.focus() } else { if (this.trials.length &lt;= 8) { let strike = 0 let ball = 0 const answerArray = this.value.split('').map((v) =&gt; parseInt(v)) for (let i = 0; i &lt; 4; i++) { if (answerArray[i] === this.answer[i]) { // 숫자 자리수 모두 정답 strike++ } else if (this.answer.includes(answerArray[i])) { // 숫자만 정답 ball++ } } this.trials.push({ try: this.value, result: `${strike} strike, ${ball} ball!` }) this.value = '' this.$refs.input.focus() if (this.trials.length === 9) { this.result = 'This is the last chance!' this.state = 'last' } else { this.result = 'Guessing...' this.state = 'ongoing' } } else { this.result = `You already tried 10 times. The number was ${this.answer.join('')}.` alert('Restarting the game.') this.answer = getNumbers() this.value = '' this.trials = [] this.$refs.input.focus() } } } } } // export default&lt;/script&gt;","link":"/11/05/2021/vue-game1/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","link":"/tags/Design-Pattern/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"MERN","slug":"MERN","link":"/tags/MERN/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Express.js","slug":"Express-js","link":"/tags/Express-js/"},{"name":"React.js","slug":"React-js","link":"/tags/React-js/"},{"name":"MongoDb","slug":"MongoDb","link":"/tags/MongoDb/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Language Comparison","slug":"Language-Comparison","link":"/tags/Language-Comparison/"},{"name":"ASP .NET","slug":"ASP-NET","link":"/tags/ASP-NET/"},{"name":"Redux","slug":"Redux","link":"/tags/Redux/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"WinForm","slug":"WinForm","link":"/tags/WinForm/"},{"name":"WCF Service","slug":"WCF-Service","link":"/tags/WCF-Service/"},{"name":"Vue.js","slug":"Vue-js","link":"/tags/Vue-js/"}],"categories":[{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Project","slug":"Project","link":"/categories/Project/"},{"name":"Design Patterns in C++&#x2F;C#","slug":"Programming/Design-Patterns-in-C-C","link":"/categories/Programming/Design-Patterns-in-C-C/"},{"name":"C++_C#_Java Comparison","slug":"Programming/C-C-Java-Comparison","link":"/categories/Programming/C-C-Java-Comparison/"},{"name":"School","slug":"Project/School","link":"/categories/Project/School/"},{"name":"Front-End Frameworks","slug":"Programming/Front-End-Frameworks","link":"/categories/Programming/Front-End-Frameworks/"},{"name":"Personal","slug":"Project/Personal","link":"/categories/Project/Personal/"},{"name":"Creational","slug":"Programming/Design-Patterns-in-C-C/Creational","link":"/categories/Programming/Design-Patterns-in-C-C/Creational/"},{"name":"Vue2","slug":"Programming/Front-End-Frameworks/Vue2","link":"/categories/Programming/Front-End-Frameworks/Vue2/"},{"name":"Vue-Web-Games","slug":"Project/Personal/Vue-Web-Games","link":"/categories/Project/Personal/Vue-Web-Games/"},{"name":"Game1","slug":"Project/Personal/Vue-Web-Games/Game1","link":"/categories/Project/Personal/Vue-Web-Games/Game1/"}]}